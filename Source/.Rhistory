}
#move to next cell if
if(movehigh==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#work from edges and fill in elevation; similar to above but can now do entire columns at one time
#for(r in (xpeak-1):1){
# land[r,] = land[(r+1),] - round(rnorm(landscape, 5, 2), 0)
# }
# for(r in (xpeak+1):landscape){
#  land[r,] = land[(r-1),] - round(rnorm(landscape, 5, 2), 0)
#}
#return land object
return(land)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + dpois(numindiv, variance)
pop[,2]  = y + dpois(numindiv, variance)
return(pop)
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#work from edges and fill in elevation; similar to above but can now do entire columns at one time
#for(r in (xpeak-1):1){
# land[r,] = land[(r+1),] - round(rnorm(landscape, 5, 2), 0)
# }
# for(r in (xpeak+1):landscape){
#  land[r,] = land[(r-1),] - round(rnorm(landscape, 5, 2), 0)
#}
#return land object
return(land)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#work from edges and fill in elevation; similar to above but can now do entire columns at one time
#for(r in (xpeak-1):1){
# land[r,] = land[(r+1),] - round(rnorm(landscape, 5, 2), 0)
# }
# for(r in (xpeak+1):landscape){
#  land[r,] = land[(r-1),] - round(rnorm(landscape, 5, 2), 0)
#}
#return land object
return(land)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + dpois(numindiv, variance)
pop[,2]  = y + dpois(numindiv, variance)
return(pop)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
numindiv
numindiv= 10  #start off with a number of individuals
landscape = 100
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
source(paste(getwd(), "/Move.R", sep = ''))
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#work from edges and fill in elevation; similar to above but can now do entire columns at one time
#for(r in (xpeak-1):1){
# land[r,] = land[(r+1),] - round(rnorm(landscape, 5, 2), 0)
# }
# for(r in (xpeak+1):landscape){
#  land[r,] = land[(r-1),] - round(rnorm(landscape, 5, 2), 0)
#}
#return land object
return(land)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + dpois(numindiv, variance)
pop[,2]  = y + dpois(numindiv, variance)
return(pop)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
numindiv
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
landscape = 100
numindiv= 10  #start off with a number of individuals
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
[]
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
View(Move)
View(Move)
View(Move)
View(Move)
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#return land object
return(land)
}
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#return land object
return(land)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + dpois(numindiv, variance)
pop[,2]  = y + dpois(numindiv, variance)
return(pop)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + rpois(numindiv, variance)
pop[,2]  = y + rpois(numindiv, variance)
return(pop)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
landscape = 100
numindiv= 10  #start off with a number of individuals
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
parameters= expand.grid(landscape,numindiv,numsteps,move,numcamera) #this creates data frame for combination of variables
colnames(parameters) = c("landscape","numindiv","numsteps","move","numcamera")
View(parameters)
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
traceback()
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
source(paste(getwd(), "/POP.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
source(paste(getwd(), "/Move.R", sep = ''))
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
