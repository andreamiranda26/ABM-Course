while(ts < time_steps){
pred            <- movement(pred);
inds            <- movement(inds); # Note: I increased prey birth rate
inds            <- birth(inds, lambda = 1.5);
pred_prey_res   <- predation(pred = pred, inds = inds);
pred            <- pred_prey_res$pred;
inds            <- pred_prey_res$inds;
inds            <- death(inds);
inds            <- inds[inds[, 5] == 0,]; # Retain living
ts              <- ts + 1;
inds_hist[[ts]] <- inds;
pred_hist[[ts]] <- pred;
}
# =============================================================================
# Print the results
# =============================================================================
ind_abund <- array(data = NA, dim = c(40, 3));
for(i in 1:40){
ind_abund[i, 1] <- i;                      # Save the time step
ind_abund[i, 2] <- dim(inds_hist[[i]])[1]; # rows in inds_hist[[i]]
ind_abund[i, 3] <- dim(pred_hist[[i]])[1]; # rows in pred_hist[[i]]
}
colnames(ind_abund) <- c("time_step", "abundance", "predators");
print(ind_abund);
# =============================================================================
# Plot the results
# =============================================================================
par(mar = c(5, 5, 1, 1));
plot(x = ind_abund[,2], type = "l", lwd = 3, ylim = c(0, 80),
xlab = "time step", ylab = "Population abundance", cex.axis = 1.5,
cex.lab = 1.5);
points(x = ind_abund[,3], type = "l", lwd = 3, col = "red");
legend(x = 0, y = 80, legend = c("Predator", "Prey"), col = c("red", "black"),
cex = 1.25, lty = c("solid", "solid"), lwd = c(3, 3));
pop
#============================================
#camera stations placement
#============================================
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- dim(cams)[1]; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
#=======================================
#tracking of individual
#=======================================
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
# # Now need to return *both* the sampled and individuals arrays
# samp_indiv <- list(sampled = sampled, numindiv = numindiv);
# return(samp_indiv);
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#return land object
return(land)
}
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + rpois(numindiv, variance)
pop[,2]  = y + rpois(numindiv, variance)
return(pop)
}
#Set working directory, import packages, source functions,
setwd("~/GitHub/ABM-Course/Source")    # set temp working directory
pop
Pop
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
landscape = 100
numindiv= 10  #start off with a number of individuals
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
parameters= expand.grid(landscape,numindiv,numsteps,move,numcamera) #this creates data frame for combination of variables
colnames(parameters) = c("landscape","numindiv","numsteps","move","numcamera")
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
image(land)
#initialize individuals on landscape
pop = Pop(numindiv, landscape) #
#place cameras on landscape
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
}
#initialize landscape
land = LandscapeInit(landscape)
#initialize landscape
land = LandscapeInit(landscape)
image(land)
View(land)
#initialize landscape
land = LandscapeInit(landscape,landscape)
#initialize landscape
land = LandscapeInit(landscape)
image(land)
View(land)
cam = cameras(cams= numcamera, numindiv, xcol = 2, ycol = 3)
#============================================
#camera stations placement
#============================================
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- cams; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
#=======================================
#tracking of individual
#=======================================
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
# # Now need to return *both* the sampled and individuals arrays
# samp_indiv <- list(sampled = sampled, numindiv = numindiv);
# return(samp_indiv);
}
cam = cameras(cams= numcamera, numindiv, xcol = 2, ycol = 3)
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- cams; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
#============================================
#camera stations placement
#============================================
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- cams; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
#=======================================
#tracking of individual
#=======================================
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
# # Now need to return *both* the sampled and individuals arrays
# samp_indiv <- list(sampled = sampled, numindiv = numindiv);
# return(samp_indiv);
}
#============================================
#camera stations placement
#============================================
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- cams; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
#=======================================
#tracking of individual
#=======================================
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
# # Now need to return *both* the sampled and individuals arrays
# samp_indiv <- list(sampled = sampled, numindiv = numindiv);
# return(samp_indiv);
}
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
landscape = 100
numindiv= 10  #start off with a number of individuals
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
parameters= expand.grid(landscape,numindiv,numsteps,move,numcamera) #this creates data frame for combination of variables
colnames(parameters) = c("landscape","numindiv","numsteps","move","numcamera")
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
#image(land)
#initialize individuals on landscape
pop = Pop(numindiv, landscape) #
#place cameras on landscape
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
}
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
#image(land)
#initialize individuals on landscape
pop = Pop(numindiv, landscape) #
#place cameras on landscape
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
}
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
#image(land)
#initialize individuals on landscape
pop = Pop(numindiv, landscape) #
#place cameras on landscape
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
}
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
pop = Pop(numindiv, landscape) #
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
samp_indiv
samp_indiv
#============================================
#camera stations placement
#============================================
cameras <- function(cams, numindiv, xcol = 2, ycol = 3){
cameras   <- cams; # camera number
for(c in 1:cameras){       # For each camera (c) in the array
xloc   <- cams[p, xcol]; # Get the x and y locations
yloc   <- cams[p, ycol];
numindiv <- sum( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
#=======================================
#tracking of individual
#=======================================
if(numindiv > 0){ # If there is an individual, capture them
sampled <- which( numindiv[, xcol] == xloc & numindiv[, ycol] == yloc);
if(numindiv < 0){ # But if less than 0 no capture
sampled <- sample(x = numindiv, size = 0, replace = FALSE);
}
numindiv[sampled, dcol] <- 1; # Record the individuals as captured
}
}
# # Now need to return *both* the sampled and individuals arrays
# samp_indiv <- list(sampled = sampled, numindiv = numindiv);
# return(samp_indiv);
}
LandscapeInit = function(landscape){
#set up object
land  = matrix(nrow=landscape, ncol=landscape)
#return land object
return(land)
}
Move=function(landscape,numindiv,numsteps,move,numcamera){
mvmt = numindiv[1] #x==1, y==2
for(s in 1:numsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indiv will move randomly or will move to next cell
movenext = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movenext==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to next cell if
if(movenext==1){
#find next cell
nxtcell = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(nxtcell[1]==1){xpos = cxpos - 1 }
if(nxtcell[1]==2){xpos = cxpos }
if(nxtcell[1]==3){xpos = cxpos + 1 }
if(nxtcell[2]==1){ypos = cypos - 1 }
if(nxtcell[2]==2){ypos = cypos }
if(nxtcell[2]==3){ypos = cypos + 1 }
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
##if(land[xpos,ypos]>=landscape[2]){
#fill out remaining positions
#mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (numsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
Pop = function(numindiv, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=100, ncol=100)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + rpois(numindiv, variance)
pop[,2]  = y + rpois(numindiv, variance)
return(pop)
}
#source functions
source(paste(getwd(), "/Landscape.R", sep = ''))
setwd("~/GitHub/ABM-Course")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
landscape = 100
numindiv= 10  #start off with a number of individuals
numsteps= 1 #number of steps individuals will take
numreps= 5  #
move = 5   #Likelihood of individuals moving to the next cell
numcamera = 50
parameters= expand.grid(landscape,numindiv,numsteps,move,numcamera) #this creates data frame for combination of variables
colnames(parameters) = c("landscape","numindiv","numsteps","move","numcamera")
for(p in 1:nrow(parameters)){
landscape = parameters$landscape[p]
numindiv  = parameters$numindiv[p]
numsteps    = parameters$numsteps[p]
move      = parameters$move[p]
numcamera = parameters$numcamera[p]
#initialize landscape
land = LandscapeInit(landscape)
#image(land)
#initialize individuals on landscape
pop = Pop(numindiv, landscape) #
#place cameras on landscape
cam = cameras(cams=numcamera, numindiv, xcol = 2, ycol = 3)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
numindiv = pop[i,,drop=FALSE]
#the i means iterates
#####     #chart movement
movepath = Move(landscape,numindiv,numsteps,move,numcamera)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/100, movepath[seq(2,length(movepath), 2)]/100, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
}
p
View(land)
